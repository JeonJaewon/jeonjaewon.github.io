<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jeonjaewon.github.io/blog</id>
    <title>whateverlogs Blog</title>
    <updated>2025-02-07T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jeonjaewon.github.io/blog"/>
    <subtitle>whateverlogs Blog</subtitle>
    <entry>
        <title type="html"><![CDATA[도로명주소와 지번주소에서 상세주소 제거하는 법]]></title>
        <id>https://jeonjaewon.github.io/blog/상세주소-없애기</id>
        <link href="https://jeonjaewon.github.io/blog/상세주소-없애기"/>
        <updated>2025-02-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[이건 내비게이션에 필요 없어요]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="이건-내비게이션에-필요-없어요">이건 내비게이션에 필요 없어요<a href="https://jeonjaewon.github.io/blog/%EC%83%81%EC%84%B8%EC%A3%BC%EC%86%8C-%EC%97%86%EC%95%A0%EA%B8%B0#%EC%9D%B4%EA%B1%B4-%EB%82%B4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98%EC%97%90-%ED%95%84%EC%9A%94-%EC%97%86%EC%96%B4%EC%9A%94" class="hash-link" aria-label="이건 내비게이션에 필요 없어요에 대한 직접 링크" title="이건 내비게이션에 필요 없어요에 대한 직접 링크">​</a></h2>
<p>업무하면서 도로명과 지번주소가 혼재되어 있는 데이터를 다룬 적이 있는데, 예를 들면 이런 데이터였습니다.</p>
<ul>
<li>주소1: 서울특별시 서초구 반포동 20-43 반포자이아파트 101동 101호</li>
<li>주소2: 서울특별시 영등포구 국회대로62길 9 (여의도동)</li>
</ul>
<p>예시의 주소 1의 경우 지번주소, 주소2는 도로명주소 입니다.</p>
<p>문제는 이 데이터를 토대로 내비게이션 API에 요청을 보내야 했는데, 저희가 사용 중인 API에서는 상세 주소에 대한 처리가 되어 있지 않아서 간혹 응답을 내리지 않는 경우가 있었습니다.</p>
<p>주소 3을 예로 들면 상세주소에 해당하는 <code>반포자이아파트 101동 101호</code>에서 <code>101호</code>는 사실 길찾기에 필요한 정보는 아닙니다. 이걸 포함시켜서 요청하면 길을 제대로 찾지 못하더라구요.</p>
<p>이해를 돕기 위해 주소를 두 가지로 분류해 보겠습니다.</p>
<ol>
<li>배송을 위한 주소</li>
<li>길찾기를 위한 주소</li>
</ol>
<p>1과 2가 같은 경우도 분명 있지만, 공동주택 등의 경우 정확한 호수를 찾기 위한 상세주소가 더해지기 때문에 표기에 차이가 생깁니다.</p>
<p>제가 겪은 문제의 경우 2만 취급하는 API에 1을 보냈기 때문에 발생한 문제였습니다.</p>
<p>그렇다면 문자열 뒷부분의 상세주소만 제거해서 요청하면 되겠다는 생각이 듭니다. 이제 이 문자열들의 어디서부터가 상세주소인지를 찾아야 합니다.</p>
<p>그렇다면 섞여 있는 도로명주소와 지번주소를 각각 다르게 파싱해야 할까요? 애초에 별도의 칼럼이 없는데 문자열만 보고 이 둘을 구분할 수는 있을까요?</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="모르겠을-땐-문서를-보기">모르겠을 땐 문서를 보기<a href="https://jeonjaewon.github.io/blog/%EC%83%81%EC%84%B8%EC%A3%BC%EC%86%8C-%EC%97%86%EC%95%A0%EA%B8%B0#%EB%AA%A8%EB%A5%B4%EA%B2%A0%EC%9D%84-%EB%95%90-%EB%AC%B8%EC%84%9C%EB%A5%BC-%EB%B3%B4%EA%B8%B0" class="hash-link" aria-label="모르겠을 땐 문서를 보기에 대한 직접 링크" title="모르겠을 땐 문서를 보기에 대한 직접 링크">​</a></h2>
<p><a href="https://www.juso.go.kr/openIndexPage.do" target="_blank" rel="noopener noreferrer">도로명주소 안내 시스템</a>에 가보면 도로명 주소 소개 pdf 파일을 배포하고 있습니다.</p>
<p><img loading="lazy" alt="Example banner" src="https://jeonjaewon.github.io/assets/images/address-comparison-3d2fe4601b823fb92a9630eddcf4bb7c.png" width="789" height="574" class="img_ev3q"></p>
<p>눈여겨보아야 할 부분은 가운데의 <code>동/리 지번</code>이 <code>도로명 건물번호</code>에 대응된다는 점입니다. 자세한 <code>도로명 건물번호</code> 규칙은 아래와 같은데요.</p>
<p><img loading="lazy" alt="Example banner" src="https://jeonjaewon.github.io/assets/images/road-address-ecc29797f25a6dfa46ee1c30106dc53a.png" width="805" height="200" class="img_ev3q"></p>
<p>이 부분이 중요합니다. 도로명은 붙여 쓰고, 도로명과 건물번호는 띄우기 때문에 이는 기존의 <code>동/리 지번</code>과 공백을 기준으로 호환이 된다고 볼 수 있습니다.</p>
<p>무슨 말인지 앞서 보았던 예시를 다시 보겠습니다.</p>
<ul>
<li>주소1: 서울특별시 서초구 <strong>반포동 20-43</strong> 반포자이아파트 101동 101호</li>
<li>주소2: 서울특별시 영등포구 <strong>국회대로62길 9</strong> (여의도동)</li>
</ul>
<p>지번주소의 <code>동/리 지번</code>은 <code>반포동 20-43</code>, 도로명주소의 <code>도로명 건물번호</code>는 <code>국회대로62길 9</code>에 해당하는 것을 알 수 있습니다. 그리고 이 주소들은 모두 가운데에 공백 문자를 1개 포함한 문자열입니다.</p>
<p>이 주소들 이후부터는 상세주소가 나오는 것을 확인할 수 있습니다.</p>
<p>즉, 도로명이냐 지번이냐에 관계 없이 단순히 문자열을 공백을 기준으로 앞에서부터 4번 취하면 상세주소를 제거한 주소를 얻을 수 있습니다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">"서울특별시 서초구 반포동 20-43 반포자이아파트 101동 101호"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">split</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">" "</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">" "</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// '서울특별시 서초구 반포동 20-43'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">"서울특별시 영등포구 국회대로62길 9 (여의도동)"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">split</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">" "</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">" "</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// '서울특별시 영등포구 국회대로62길 9'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이제 이 문자열이 신주소인지 구주소인지와는 관계 없이 간단한 방법으로 상세주소를 제거할 수 있습니다.</p>]]></content>
        <category label="programming" term="programming"/>
        <category label="map" term="map"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[내가 2023년에 배운 것들]]></title>
        <id>https://jeonjaewon.github.io/blog/2023-retro</id>
        <link href="https://jeonjaewon.github.io/blog/2023-retro"/>
        <updated>2024-02-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[- 조금 더 common한 코드 베이스에 기여하기 / 목적 조직에서 일하기]]></summary>
        <content type="html"><![CDATA[<ul>
<li>조금 더 common한 코드 베이스에 기여하기 / 목적 조직에서 일하기</li>
</ul>
<p>웹 코드 베이스에 대한 이해도가 늘어나고 shared, common 정도로 표현되는 공통 모듈에 대한 기여도 자연스레 늘어났다. 목적 조직에서 몇 개월간 일하기도 했는데 작년 한 해 가장 몰입해서 일했던 경험으로 기억됐다. 내가 맡은 부분이 아니더라도 전체 제품에 대한 맥락을 고민하는 경험이 좋았다. 자연스레 업무시간 내 회의와 논의하는 시간은 상대적으로 늘어나고 코드를 집중해서 작업하는 시간은 줄었던 점은 아쉽다.</p>
<hr>
<ul>
<li>희망 퇴직과 인수합병 이슈</li>
</ul>
<p>회사가 경영상 어려움으로 인해 인원을 절반 가량 감축했다. 나도 회사를 계속 다닐지, 혹은 다닐 수 있을지 걱정하고 고민하느라 심적으로 어려웠다. 결과적으로는 계속 회사를 다니고 있다</p>
<p>회사가 감정적으로 격정적인 시즌이었다. 떠나기로 마음 먹은 분들은 그 자리에서 바로 짐을 싸고 나가셨다. 함께 일하던 동료들을 하루아침에 떠나보내는 일이 쉽지 않았다. 희망퇴직 이후로도 회사의 인수/합병 이슈 등이 반복되었다. 거취의 불확실성을 지닌 채로 일하는 것이 직원으로서 불안정하게 느껴진 한 해였던 것 같다.</p>
<p>배운 점이 있다면 이러한 변화 조차도 버텨낼 수 있는 어려움이라는 것을 알았다는 점이다. 그런 상황에서 스트레스를 받는 것은 피할 수 없었지만 할 일을 하다보니 어떻게든 버텨냈다.</p>
<p>당연한 사실이지만 회사와 개인은 계약 관계이고, 그 계약은 생각보다 견고하지 않을 수도 있겠다는 생각도 들었다. 개인으로서 더 길게 이어질 내 삶을 잘 개발하기 위해 노력해야겠다는 생각도 들었다.</p>
<p>어떤 선택을 하셨던지 함께 어려운 일을 겪은 동료 분들이 다들 잘 지내셨으면 좋겠다.</p>
<hr>
<ul>
<li>혼자 개발하기</li>
</ul>
<p>희망 퇴직으로 인해 웹 프론트엔드팀 팀원들이 모두 떠났다. 혼자서 잘 해낼 수 있을지 걱정이 많았다. 가장 오래 시간을 보낸 팀 동료들이 떠나니 일적인 면을 떠나서 심적으로도 어려웠다.</p>
<p>홀로 제품 개발에 투입되니 심리적 압박을 느끼는 경우가 종종 있었다. 어떤 문제가 잘 풀리지 않을 때, 기한은 정해져 있고 함께 논의할 사람은 없으니 그러한 압박감이 주는 스트레스가 있었다.</p>
<p>어떤 태스크를 진행하고 있는데 새롭게 다른 태스크가 들어오는 것의 핸들링이 힘들었다. 원래라면 다른 동료와 잘 분배해서 처리했을 일인데 이제는 어떻게든 혼자 해내야 하는 일이 됐다.</p>
<p>일단 일이 새롭게 들어오면 우선순위와 마감 기한에 대해서 커뮤니케이션을 했다. 급한 일이라면 진행 중인 일이 있더라도 미뤄두고 먼저 처리하는 등의 태스크 관리가 필요했다. 회사 Jira와는 별개로 개인적으로 ToDoist 등 툴을 사용해 일감을 정리했다. 개인 툴에 들어온 일의 우선순위, 마감기한, 업무 내용과 메모 등을 정리해 어쩔 수 없이 많아지는 업무 간 context switching을 효율적으로 할 수 있도록 노력했다.</p>
<p>돌이켜보면 일이 많았던 것도 있었겠지만 혼자라는 사실이 주는 심리적 압박감에 더욱 이것저것 도구나 방법 등을 찾았던 것 같다.</p>
<p>결과적으로 큰 이슈 없이 홀로 회사의 웹을 약 4개월간 운영했다. 신규 입사자 분이 오셔서 1인팀 생활은 마무리할 수 있었다. 웹 개발의 병목이 제품 개발 전체의 병목이 되는 상황이 두려웠는데 그런 상황은 일어나지 않아서 다행이다. 또한 내 의사결정이 미치는 범위가 상대적으로 커지는 상황을 경험하고 익숙해질 수 있었던 것 같다.</p>
<hr>
<ul>
<li>채용 프로세스 참여</li>
</ul>
<p>같이 일할 팀원을 뽑는 채용 프로세스에도 참여했다. 면접관으로서 면접에 참여하는 일이 처음에는 긴장되고 부담스러웠다. 회사의 얼굴로서 공적인 자리에 참여한다고 생각하니 어깨가 무겁게 느껴졌다.</p>
<p>자연스레 지원자를 어떻게 평가할 것인가? 혹은 어떤 질문을 할 것인가? 에 대한 고민도 이어졌다.</p>
<p>개인적으로 퀴즈 식의 면접은 면접자를 검증하는데 큰 도움이 되지 않는다고 생각한다. 왜냐하면 그런 식의 질문들은 <strong>면접 준비를 했다면</strong> 대답이 가능한 종류의 질문이기 때문이다. 혹은 어떤 질문은 실무와 매우 동떨어져 준비를 '해야만' 대답이 가능한 경우도 있을 것이다.</p>
<p>내가 같이 일하고 싶은 사람은 면접 준비를 잘 하는 사람은 아니었다. 벼락 치기가 가능한 질문에 대답을 잘한다고 해서 조직에서 원하는 역량을 검증할 수 없다고 생각했다.</p>
<p>퀴즈 같은 질문을 최대한 지양하고 면접자 분이 문제를 접근하는 방법이나 어떤 주제에 대한 개인적인 의견들에 대해서 질문했다. 또한 그것을 표현하는 커뮤니케이션 내지는 태도 또한 집중해서 보았다.</p>
<hr>
<ul>
<li>정답 맞추기</li>
</ul>
<p>코드에 정답이 있다고 생각하곤 했다. 작업을 시작하기 전에 best practice 따위의 검색 결과를 주욱 훑었다. 문제에 대해 내가 떠올리지 못하고 있는 정답이 있을 거라고 생각했다.</p>
<p>지금으로서 내린 결론은 설사 그것이 존재하더라도 그다지 중요하지 않다는 것이다. 요구사항은 항상 변화하고 그로인해 '그때는 맞지만 지금은 틀리다'와 같은 상황이 계속 발생한다. 그 때 그렇게 탐닉했던 정답은 지금에 와서는 의미없는 것이 되는 경우가 많았다. 결론적으로는 정답에 대한 탐닉은 그만두기로 했다. 이는 코드 퀄리티를 포기하겠다는 의미는 전혀 아니다. 문제를 바라보는 관점이 달라졌다는 정도의 의미로 볼 수 있겠다. 변경을 감히 예측할 수는 없지만, 변경이 용이한 코드를 만들어야 한다는 생각이다.</p>
<p>지금까지 같이 일하며 '이런 사람과 일하면 좋았다'라는 사람들의 특징을 떠올려 보았다. 그런 사람들은 항상 정답을 제시하는 사람들은 아니었다. 여러 모습들이 있겠지만 그들은 대체로 주어진 기한을 준수하고, 과정과 결과를 공유하고, 꾸준히 개선을 해내는 사람들이라고 생각한다. 편안한 논의 파트너이기도 했다. 그렇다면 나 또한 항상 퀴즈의 정답을 맞추는 사람일 필요는 없을 것이다.</p>]]></content>
        <category label="career" term="career"/>
        <category label="retrospect" term="retrospect"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[redux-saga와 헤어질 결심]]></title>
        <id>https://jeonjaewon.github.io/blog/good-bye-saga</id>
        <link href="https://jeonjaewon.github.io/blog/good-bye-saga"/>
        <updated>2024-02-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[redux-saga는 redux 미들웨어로, 매우 강력한 사이드 이펙트 처리를 가능하게 만드는 라이브러리다.]]></summary>
        <content type="html"><![CDATA[<p><code>redux-saga</code>는 redux 미들웨어로, 매우 강력한 사이드 이펙트 처리를 가능하게 만드는 라이브러리다.</p>
<p>최근 회사 코드베이스에서 이 의존성을 제거하고자 하여 그 의사결정의 근거들을 남긴다.</p>
<blockquote>
<p>이 글은 읽는 사람이 <code>redux-saga</code>와 <code>redux-toolkit</code>을 이용한 프론트엔드 개발 경험이 있다고 가정한다.</p>
</blockquote>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-러닝커브의-관점">1. 러닝커브의 관점<a href="https://jeonjaewon.github.io/blog/good-bye-saga#1-%EB%9F%AC%EB%8B%9D%EC%BB%A4%EB%B8%8C%EC%9D%98-%EA%B4%80%EC%A0%90" class="hash-link" aria-label="1. 러닝커브의 관점에 대한 직접 링크" title="1. 러닝커브의 관점에 대한 직접 링크">​</a></h3>
<p>Generator는 saga 이외의 사용처를 찾아보기 힘들다. 대부분의 입문자는 saga를 배우려면 먼저 generator부터 공부해야 한다.</p>
<p>또한 saga가 제시하는 멘탈 모델에 익숙해져야 한다. <a href="https://redux-saga.js.org/docs/About/" target="_blank" rel="noopener noreferrer">공식 문서</a>에 따르면,</p>
<blockquote>
<p>The mental model is that a saga is like a separate thread in your application that's solely responsible for side effects.</p>
</blockquote>
<p>사가의 멘탈 모델은 어플리케이션에서 사이드 이펙트를 책임지는 별도의 스레드와 같다. 일반적인 React 개발 경험과는 상당히 이질적이어서 익숙해지는데 시간이 필요하다.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-코드-변경으로-인한-사이드-이펙트-통제의-관점">2. 코드 변경으로 인한 사이드 이펙트 통제의 관점<a href="https://jeonjaewon.github.io/blog/good-bye-saga#2-%EC%BD%94%EB%93%9C-%EB%B3%80%EA%B2%BD%EC%9C%BC%EB%A1%9C-%EC%9D%B8%ED%95%9C-%EC%82%AC%EC%9D%B4%EB%93%9C-%EC%9D%B4%ED%8E%99%ED%8A%B8-%ED%86%B5%EC%A0%9C%EC%9D%98-%EA%B4%80%EC%A0%90" class="hash-link" aria-label="2. 코드 변경으로 인한 사이드 이펙트 통제의 관점에 대한 직접 링크" title="2. 코드 변경으로 인한 사이드 이펙트 통제의 관점에 대한 직접 링크">​</a></h3>
<p>사가는 <code>generator function</code>과 (이하 <code>saga function</code>) 이들을 트리거 시키는 action의 <code>watcher</code>가 함께 쓰이는 것이 일반적인 패턴이다.</p>
<p>이러한 패턴으로 인해 <code>saga function</code>을 실행하는데는 크게 세 가지의 방법이 있다.</p>
<ol>
<li><code>call</code></li>
<li><code>fork</code></li>
<li><code>put</code> / <code>dispatch</code></li>
</ol>
<p>이 세 방식은 플로우 컨트롤에 있어 다른 특징을 가지므로, 어떤 구현을 원하느냐에 따라 적절히 선택해야 한다.</p>
<p>문제는 특정 <code>saga function</code>의 body를 변경하려면, 해당 <code>saga function</code>이 세 가지 중 어떤 방식으로 호출되고 있느냐를 살펴봐야 한다는 점이다. 즉 호출부를 면밀히 살펴봐야 선언부를 고치기 위한 확신을 얻을 수 있었다.</p>
<p>이는 결국 코드를 적극적으로 변경하기 힘들게 만든다. 코드의 변경으로 인한 사이드 이펙트 통제가 어렵다고도 표현할 수 있다.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-재사용의-어려움-관점">3. 재사용의 어려움 관점<a href="https://jeonjaewon.github.io/blog/good-bye-saga#3-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%9D%98-%EC%96%B4%EB%A0%A4%EC%9B%80-%EA%B4%80%EC%A0%90" class="hash-link" aria-label="3. 재사용의 어려움 관점에 대한 직접 링크" title="3. 재사용의 어려움 관점에 대한 직접 링크">​</a></h3>
<p><code>saga function</code>을 재사용하기 위해서는 로직을 추출하고 그 로직에 대한 플로우 컨트롤이 필요하다. 여기서 플로우 컨트롤에는 자연스럽게 그 로직에 대한 호출이 포함된다.</p>
<p>예를 들어 <code>saga function</code> 내에서 다른 <code>saga function</code>을 호출한다면 2에서 언급했던 세 가지 방식 중 하나로 호출하게 된다. 즉 재사용을 하기 위해서 2에서 말한대로 <strong>적극적으로 변경하기 어려운 코드를 작성</strong>하게 되는 것이다.</p>
<p>또한 saga를 새로 만드려면 slice에 이를 위한 action들을 추가로 선언해주어야 한다.
이는 어느정도는 필연적으로 어려운 것으로 보았다. 왜냐하면 slice는 기본적으로 <strong>데이터</strong>를 담기 위한 단위이다. 여기에 <strong>로직</strong>의 재사용을 위한 saga를 위한 action을 담는다는 것은 본질적인 불일치가 존재한다.</p>
<p>결국 해당 saga의 action들을 넣을 적절한 slice가 없는 상황이 종종 발생한다. 이런 상황 때문에 우리는 종종 어쩔 수 없이 saga의 action만을 담고있는 slice를 만들곤 했다.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-redux-store가-비대해지는-문제">4. redux store가 비대해지는 문제<a href="https://jeonjaewon.github.io/blog/good-bye-saga#4-redux-store%EA%B0%80-%EB%B9%84%EB%8C%80%ED%95%B4%EC%A7%80%EB%8A%94-%EB%AC%B8%EC%A0%9C" class="hash-link" aria-label="4. redux store가 비대해지는 문제에 대한 직접 링크" title="4. redux store가 비대해지는 문제에 대한 직접 링크">​</a></h3>
<p>saga는 redux store를 비대하게 만든다. 여기서 비대하게 만든다는 표현의 정확한 뜻은, 본래 필요한 정도보다 비대해 진다는 뜻이다.</p>
<p>saga는 비동기 로직을 처리한 뒤 redux store에 담기 위한 의존성이다. 즉, store에 담기는 해당 데이터 외의 추가적으로 redux store를 비대하게 만드는 것은 saga가 해결하는 문제와는 관련 없는 불필요한 오버헤드라고 생각했다.</p>
<p>redux store가 비대해지면 전반적인 코드베이스 파악이 힘들어지고, 번들도 불필요하게 커진다.</p>
<p>또한 우리 코드는 side effect 의 제어를 제외한 부분까지도 saga로 구현된 부분이 다수 존재했다. 예를 들면 팝업을 열거나 닫는 로직조차 saga로 작성되어 있다. 어떻게 보면 비즈니스 로직까지 saga라는 레이어에 포함시킨 것이다. 그 결과 saga에서 select 혹은 put하기 위해 redux에 있을 필요 없는 상태 조차 redux에 넣고 있었다.
이는 또 한 번 store를 비대하게 만들었다.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-typescript-타이핑의-관점">5. Typescript 타이핑의 관점<a href="https://jeonjaewon.github.io/blog/good-bye-saga#5-typescript-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%98-%EA%B4%80%EC%A0%90" class="hash-link" aria-label="5. Typescript 타이핑의 관점에 대한 직접 링크" title="5. Typescript 타이핑의 관점에 대한 직접 링크">​</a></h3>
<p>saga는 Typescript native로 작성된 라이브러리가 아니다. 타이핑을 개선하기 위한 커뮤니티 라이브러리 (i.e. <code>typed-redux-saga</code>) 들이 있지만 이것도 그리 만족스러운 타입스크립트 코딩 경험을 주진 못했다.</p>
<p>다만 개인적으로 DX는 결국 비즈니스를 지탱하기 위한 최소 생산성을 담보하기 위한 선만 지켜도 된다고 생각하고, <code>typed-redux-saga</code>를 이용한 개발 경험이 아슬아슬하지만 그 선 이상은 지켜준다고 생각하기에 언급만 하고 넘어가겠다.</p>
<hr>
<p>위와 같은 이유들로 saga를 떠나 다른 server state 관리 라이브러리로 마이그레이션하는 것으로 결정했다. 그리고 우리의 다음 스텝은 <code>rtk-query</code>로 결정했다. 관련되어 어떤 어려움이 있었고, 좋았던 점은 무엇이 있는지 등 관련된 이야기는 다음 글에서 다뤄 봐야겠다.</p>
<p>지금까지 우리의 웹 개발 스택을 잘 지탱해준 saga에게 감사를 표하며...</p>]]></content>
        <category label="redux" term="redux"/>
        <category label="redux-saga" term="redux-saga"/>
        <category label="server state" term="server state"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ts-pattern을 도입해도 될까?]]></title>
        <id>https://jeonjaewon.github.io/blog/can-i-use-ts-pattern</id>
        <link href="https://jeonjaewon.github.io/blog/can-i-use-ts-pattern"/>
        <updated>2023-12-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ts-pattern은 패턴 매칭을 Typeacript 환경에서 사용할 수 있는 라이브러리다.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/gvergnaud/ts-pattern" target="_blank" rel="noopener noreferrer">ts-pattern</a>은 패턴 매칭을 Typeacript 환경에서 사용할 수 있는 라이브러리다.
<a href="https://en.wikipedia.org/wiki/Pattern_matching" target="_blank" rel="noopener noreferrer">패턴 매칭</a>은 주로 함수형 프로그래밍 언어에서 조건 및 분기 구현을 위해 사용한다고 한다.</p>
<p>React 컴포넌트에서 삼항 연산자 등을 사용해 조건부 렌더링 구현을 하다가 대안이 없을까 싶어 찾아보다가 발견한 라이브러리다. Github에 걸려있는 적용 이전과 이후를 비교한 예시를 보고 혹해버렸다. 회사 프로젝트에 적용할 수 있을지 검토해보고 내린 결론과 그 근거를 정리해보았다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="예시-코드">예시 코드<a href="https://jeonjaewon.github.io/blog/can-i-use-ts-pattern#%EC%98%88%EC%8B%9C-%EC%BD%94%EB%93%9C" class="hash-link" aria-label="예시 코드에 대한 직접 링크" title="예시 코드에 대한 직접 링크">​</a></h3>
<p>지도의 마커를 정의하기 위해 아래와 같이 타입이 있다고 하자.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">Path</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Start"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Middle"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"End"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">Marker</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  iconType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Place"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Path"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 마커의 종류는 두 가지로, Place 마커의 경우에는 pathType을 가지지 않는다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  pathType</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Path</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>ts-pattern을 적용하기 이전의 코드는 아래와 같다.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> getPathType </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">marker</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Marker</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Path</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">undefined</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">marker</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">iconType</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Path"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">marker</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pathType</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Start"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Start"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">marker</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pathType</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Middle"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Middle"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">marker</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pathType</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"End"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"End"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">BeforePattern</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> marker</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Marker</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    iconType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Path"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pathType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Start"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token function" style="color:#d73a49">getPathType</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">marker</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>중첩된 if문을 통해 구현했다.</p>
<p>ts-pattern을 적용할 시 아래와 같은 구현이 가능하다.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">AfterPattern</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> marker</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Marker</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    iconType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Pathway"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pathType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Start"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token function" style="color:#d73a49">match</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">marker</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">with</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> iconType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Pathway"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pathType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Start"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Start"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">with</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> iconType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Pathway"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pathType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Middle"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Middle"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">with</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> iconType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Pathway"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pathType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"End"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"End"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">otherwise</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이외에도 놓치는 분기 케이스가 없도록 <code>exhaustive()</code> 를 추가하거나, 분기 및 type narrowing을 위해 <code>when()</code>등을 유용하게 쓸 수 있을 것 같다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="내-생각">내 생각<a href="https://jeonjaewon.github.io/blog/can-i-use-ts-pattern#%EB%82%B4-%EC%83%9D%EA%B0%81" class="hash-link" aria-label="내 생각에 대한 직접 링크" title="내 생각에 대한 직접 링크">​</a></h3>
<ol>
<li>새로운 언어를 배우는 것 같아 재밌었고, 확실히 일반적인 if, switch 분기보다 강력하다</li>
<li>그러나 추가적인 사용법을 배울만큼 리턴이 뚜렷하지 못한 듯</li>
</ol>
<ul>
<li>코드만 보고 동작을 100% 확실하게 예측하기 어려웠다.</li>
<li>반대로 표현하면 어떤 동작을 원할 때 바로 코드로 옮기기 쉽지 않았다.</li>
<li>예를 들어 어떤 구현을 특정 조건에 공통으로 적용시켜야 한다면? 굉장히 일상적인 구현이지만 <code>ts-pattern</code>으로 구현하려니 몇 가지 의문점이 있었고, 이런 단순한 코드조차 새로 학습해야한다는 점은 코드베이스에 익숙하지 않은 개발자에게는 큰 진입장벽이 될 수 있다고 생각했다.</li>
<li>조건과 분기는 구현에서 큰 비율을 차지하는데, 이걸 러닝커브가 있는 라이브러리를 도입할 만큼 뾰족하게 좋아진다는 느낌이 없었다. 확실한 이득이 있다면 도입을 고려했겠지만, 그 정도는 아니라고 판단했다.</li>
</ul>
<ol start="3">
<li>실제 프로덕션 코드에서 적용할 만한 사례를 찾지 못함</li>
</ol>
<ul>
<li>ternary operator의 bracket안에서 변수 선언을 한다거나 하는 일은 굳이 할 일 없는 것 같다.</li>
<li><code>exhaustive()</code>는 좋은 것 같은데, 린트로 대체할 수 있을 것 같아 그 쪽을 찾아보는게 나을 것 같다.</li>
<li><code>when()</code>의 콜백으로 type predicates (i.e: <code>(val: any): val is undefined =&gt; { ... }</code>)가 포함된 타입 가드 함수를 또 만들어야 한다는게 지나친 오버헤드 같다. 그런 함수를 선언해야 한다면 원래 방식으로도 잘 분기할 수 있을 것 같았다.</li>
<li>개인적인 취향으로 특정 조건에 대한 handler를 <code>with()</code>의 두 번째 인자인 function으로 넘겨야 하는데, 값으로 충분할 때도 함수 형태로 넘겨야 하는 점이 가독성이 조금 떨어진다고 느꼈다.</li>
</ul>
<ol start="4">
<li>조건이 복잡한 경우는 <code>switch(true)</code> 패턴으로 대체 가능할 듯</li>
</ol>
<ul>
<li>Typescript 5.3 이전에는 <code>switch(true)</code> 에서 조건 내의 type narrowing이 되지 않는 문제가 있어서 어려움이 있었는데, 5.3 에서 개선되었기 때문에 굳이 <code>ts-pattern</code>을 쓸 이유는 없어 보인다.</li>
<li><a href="https://www.typescriptlang.org/play?#code/MYewdgzgLgBAlhAqmAJgUwGZzGlMC8MAFAIYBcMJYAngJQUnwQwCuqm2uBAfJQfoTbosOFACgxUagAc0MAPIAjAFYEYAbzExtMYCQBOKAPwUAwgbwAfVuxG4xAXwnYoafRhLA55wxq07FKgBrExhofWwAcxhHCTFQSFgMNmA1IhAVCiVlWh4-HTCAdzgoYAALIih9FjRczQKCvQg5AEIEZGFOFHSVADo9Q3p8hpGE6BgMEBA1DOV+i38RxvAIEAAbNF61kEieuYGUWgBuRaXtRX00EiCTs6cz06cHIA" target="_blank" rel="noopener noreferrer">Typescript 릴리즈 노트 링크</a></li>
</ul>
<p>결론적으로 도입하지 않기로 결정했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="발견한-사이드-케이스">발견한 사이드 케이스<a href="https://jeonjaewon.github.io/blog/can-i-use-ts-pattern#%EB%B0%9C%EA%B2%AC%ED%95%9C-%EC%82%AC%EC%9D%B4%EB%93%9C-%EC%BC%80%EC%9D%B4%EC%8A%A4" class="hash-link" aria-label="발견한 사이드 케이스에 대한 직접 링크" title="발견한 사이드 케이스에 대한 직접 링크">​</a></h3>
<p><code>when()</code> 에 넘기는 함수에서 generic을 사용할 경우 type narrowaing이 되지 않았다.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 이런 함수들을 넘겨도 이후 블럭에서 val이 T가 아닌 T | undefined로 추론되었다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> isDefined </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">val</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">T</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> val </span><span class="token keyword" style="color:#00009f">is</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">T</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> val </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://github.com/gvergnaud/ts-pattern/issues/64" target="_blank" rel="noopener noreferrer">issue</a>도 생성되어 있는데 당장 해결은 어려운 듯 하다.</p>
<p>재밌었지만 전체적으로 조금 아쉬운 도구라고 느꼈다.</p>]]></content>
        <category label="typescript" term="typescript"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[useEffect cleanup과 퍼널 관리에 대한 생각들]]></title>
        <id>https://jeonjaewon.github.io/blog/use-effect-with-funnel</id>
        <link href="https://jeonjaewon.github.io/blog/use-effect-with-funnel"/>
        <updated>2023-06-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[개요]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="개요"><strong>개요</strong><a href="https://jeonjaewon.github.io/blog/use-effect-with-funnel#%EA%B0%9C%EC%9A%94" class="hash-link" aria-label="개요에 대한 직접 링크" title="개요에 대한 직접 링크">​</a></h3>
<p>퍼널을 이탈할 때, 유저가 업데이트한 상태를 초기 상태로 clear하는 요구사항에 대해서 고민하다가 생각한 내용들을 정리해보았다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tldr"><strong>TL;DR</strong><a href="https://jeonjaewon.github.io/blog/use-effect-with-funnel#tldr" class="hash-link" aria-label="tldr에 대한 직접 링크" title="tldr에 대한 직접 링크">​</a></h3>
<ul>
<li>useEffect 내의 코드 없이 cleanup만 정의된 코드는 문제가 될 수 있다.</li>
<li>컴포넌트의 side effect는 가능하다면 이벤트와 이벤트 핸들러로 관리하고, useEffect는 그렇게 하기 어려울 때만 사용한다.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cleanup을-통한-솔루션"><strong>cleanup을 통한 솔루션</strong><a href="https://jeonjaewon.github.io/blog/use-effect-with-funnel#cleanup%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%86%94%EB%A3%A8%EC%85%98" class="hash-link" aria-label="cleanup을-통한-솔루션에 대한 직접 링크" title="cleanup을-통한-솔루션에 대한 직접 링크">​</a></h3>
<p>가장 먼저 떠올린 방법은 페이지 컴포넌트의 cleanup 시점에 clear시켜주는 방법이다.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Payment</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">useEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">dispatch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">paymentActions</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">clear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>문제는 개발 환경에서 <strong>StrictMode</strong> 동작으로 인해 컴포넌트가 두 번 렌더되며 cleanup이 한 번 실행된다는 점이다. 결과적으로 원하는 값으로 유지시킬 수 없는 문제가 발생한다.</p>
<p>이에 대한 해결책으로 두 가지를 생각했다.</p>
<ol>
<li>환경변수를 참조하는 등(dev인지 확인하고 분기) 어떻게든 cleanup을 단 한 번 실행시킨다.</li>
<li>useEffect가 아닌 다른 방법을 통해 구현한다.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cleanup이-솔루션이-될-수-없는-이유"><strong>cleanup이 솔루션이 될 수 없는 이유</strong><a href="https://jeonjaewon.github.io/blog/use-effect-with-funnel#cleanup%EC%9D%B4-%EC%86%94%EB%A3%A8%EC%85%98%EC%9D%B4-%EB%90%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EC%9D%B4%EC%9C%A0" class="hash-link" aria-label="cleanup이-솔루션이-될-수-없는-이유에 대한 직접 링크" title="cleanup이-솔루션이-될-수-없는-이유에 대한 직접 링크">​</a></h3>
<p>useEffect cleanup이 솔루션이 될 수 없다고 생각한 이유는 그 <strong>멘탈모델이 동기화를 구현하는 것</strong> 이기 때문이다. 요구사항은 유저가 특정 퍼널에 진입하거나, 어떤 버튼을 누르는 등의 동작을 했을 때 그에 반응하는 동작을 정의하면 될 뿐이다. 즉, <strong>단순히 화면에서 사라질 때를 캐치하기 위해 cleanup을 사용하는 것은 완전 잘못된 사고방식일 수 있다</strong>.</p>
<p>그렇다면 다른 해결책은 무엇이 있을까?</p>
<p>기본적으로 리액트에서 <a href="https://react.dev/learn/keeping-components-pure#where-you-_can_-cause-side-effects" target="_blank" rel="noopener noreferrer">컴포넌트는 렌더에 대해서 퓨어해야 한다</a>. 공식처럼 계산만 해야하지, 변경해서는 안된다.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Component</span><span class="token tag" style="color:#00009f">&nbsp;</span><span class="token tag attr-name" style="color:#00a4db">props</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript number" style="color:#36acaa">1</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f">&nbsp;</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain">&nbsp;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Component</span><span class="token tag" style="color:#00009f">&nbsp;</span><span class="token tag attr-name" style="color:#00a4db">props</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript number" style="color:#36acaa">1</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f">&nbsp;</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain">&nbsp;</span><span class="token comment" style="color:#999988;font-style:italic">//&nbsp;같은&nbsp;input&nbsp;(props,&nbsp;state,&nbsp;context)&nbsp;에&nbsp;대해서&nbsp;같은&nbsp;결과를&nbsp;리턴해야&nbsp;한다</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>단, 렌더 이후에 side effect가 필요한 시점이 있다. 이런 side effect에는 데이터를 바꾸거나 API를 요청하는 등 다양한 행동이 있을 수 있다. 이러한 side effect는 대부분&nbsp;이벤트&nbsp;핸들러로&nbsp;처리가&nbsp;가능하다.
<strong>이벤트는 렌더 중에 일어나지 않으므로</strong> 퓨어할 필요가 없다.</p>
<blockquote>
<p>Even though event handlers are defined inside your component, they don’t run during rendering! <strong>So event handlers don’t need to be pure.</strong></p>
</blockquote>
<p>발생시켜야 하는 side effect가 그 어떤 이벤트 핸들러로도 처리가 어렵다면, 마지막 옵션으로 useEffect를 활용한다.</p>
<p>결론적으로, 우리가 제어하고 싶은 상황은 <strong>이벤트다</strong>. 퍼널을 이탈하는 동작은 뒤로 가기 버튼을 클릭하는 것 처럼 이벤트로서 처리될 수 있기 때문이다.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="데이터를-어떻게-관리할-것인가"><strong>데이터를 어떻게 관리할 것인가?</strong><a href="https://jeonjaewon.github.io/blog/use-effect-with-funnel#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B4%80%EB%A6%AC%ED%95%A0-%EA%B2%83%EC%9D%B8%EA%B0%80" class="hash-link" aria-label="데이터를-어떻게-관리할-것인가에 대한 직접 링크" title="데이터를-어떻게-관리할-것인가에 대한 직접 링크">​</a></h3>
<p>한 퍼널에 해당하는 코드들을 하나의 모듈에 위치시켜 <strong>응집도를 높여야 전체적인 데이터 흐름이 관리될 수</strong> 있다고 생각했다.</p>
<p><strong>이벤트 핸들러로 클리어하는 로직들이 곳곳에 산재되어 있으면 전역 상태에 대한 관리가 힘들어진다.</strong> 어떤 퍼널에서는 어떤 데이터를 클리어해야하고, 그 후 진입 시에는 어떤 데이터가 남아 있을 것이고.. 이런 것들을 생각하면 상태를 추적하기에 어려움이 있을 수 있다.</p>
<p>toss의 slash 라이브러리에 <a href="https://slash.page/ko/libraries/react/use-funnel/readme.i18n/" target="_blank" rel="noopener noreferrer">useFunnel</a>라는 hook이 있다, 이처럼 한 퍼널에 해당하는 스텝들을 관리하는 방법도 좋은 것 같다.</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">KyoboLifeFunnel</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token maybe-class-name">Funnel</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> state</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setState</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useFunnel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'아파트여부'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'지역선택'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'완료'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">withState</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    propertyType</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'빌라'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'아파트'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    address</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> 상담신청 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useLoanApplicationCallback</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Funnel</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Funnel.Step</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">아파트여부</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        &lt;아파트여부스텝 지역선택으로가기=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prev </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">prev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> step</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'지역선택'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> isApartment</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"> /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">Funnel.Step</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Funnel.Step</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">지역선택</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        &lt;지역선택스텝 지역선택완료=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">지역정보</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prev </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">prev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> step</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'완료'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> region</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> 지역정보</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"> /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">Funnel.Step</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Funnel.Step</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">완료</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        &lt;완료스텝 신청=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">상담신청</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"> /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">Funnel.Step</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">Funnel</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <category label="react" term="react"/>
        <category label="useEffect" term="useEffect"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[첫 제품을 배포하고 배운 것들]]></title>
        <id>https://jeonjaewon.github.io/blog/after-launching-first-product</id>
        <link href="https://jeonjaewon.github.io/blog/after-launching-first-product"/>
        <updated>2023-04-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[약 3개월 정도 개발에 참여한 제품이 3월 경 드디어 세상에 나왔다.]]></summary>
        <content type="html"><![CDATA[<p>약 3개월 정도 개발에 참여한 제품이 3월 경 드디어 세상에 나왔다.</p>
<p>주요 제품이라고 할 만한 정도로 크기가 큰 경우는 처음인 것 같다.</p>
<p>회사에서 운영 중인 서비스의 특징으로는 투 사이드 마켓 플랫폼 서비스라는 점이 있다. 자연스럽게 어떤 한 제품을 개발한다는 것은 수요자(이후 '유저') 사이드에 제공되는 서비스와, 공급자(이후 '드라이버') 사이드에 제공되는 서비스를 동시에 개발하게 되는 경우가 많다. 또한 현재 목적 조직 형태로 일하고 있는데, 이러한 특징들 덕분에 개발자로서는 재미있는 경험을 할 수 있다.</p>
<ul>
<li>유저-드라이버 사이드를 모두 고려하며 제품의 아이디에이션부터 UI / UX 개선, 전반적인 사용 경험까지 폭넓게 참여할 수 있었다.</li>
<li>프론트엔드 개발자로서는 생각해야 하는 사용자의 경험이 전혀 다르다는 점이 재밌었다.</li>
</ul>
<p>입사 후 사실상 첫 프로젝트였고, 프론트엔드 관련 개발은 대체로 혼자 진행했다. 초반에는 생각했던 것보다 크기가 큰 제품이어서 당황스럽기도 했지만, 같이 작업한 동료들의 도움 덕분에 잘 마무리할 수 있었다. 프로로서 처음으로 내놓은 볼륨 있는 결과물이자, 그 과정에 주도적으로 참여할 수 있는 점이 의미 있었다고 생각한다. 배포 이후 큰 이슈 없이 정상적으로 프로덕션에서 운영 중인 점도 프로젝트로서 좋은 마무리였다고 생각한다.</p>
<p>아쉬웠던 점은 다음처럼 정리해 볼 수 있겠다.</p>
<ul>
<li>
<p>예상 개발 시간 산정이 부정확했다.</p>
<ul>
<li>코드베이스와 기존 업무 프로세스 이해도가 다소 부족한 상태였기에 산정했던 것과 실제 개발 마무리 시간이 다른 경우가 꽤 있었다.</li>
<li>프로젝트 이해도 부족과, 역량을 증명하고 싶다는 욕심 때문에 조금 무리한 일정을 잡기도 했다. 1~2 주야 괜찮았지만 프로젝트 기간이 길어지자 조금 무리였다는 생각이 든다.</li>
</ul>
</li>
<li>
<p>너무 큰 PR을 만들었다.</p>
<ul>
<li>초반의 프로젝트 이해도 부족으로 인해 작업 단위를 너무 크게 나눴고, 이는 PR이 너무 커지는 결과로 이어졌다. 코드 리뷰하는 동료들도 부담스러웠을 것이고, 갈수록 세부적인 작업의 파악들이 쉽지 않다고 느꼈다.</li>
</ul>
</li>
<li>
<p>원인은 복합적이겠지만 생각보다 많은 수요를 만들어 내지 못했다.</p>
</li>
</ul>
<p>어쨌든 이 제품이 성공적으로 랜딩한 덕분에 많은 것을 배울 수 있었다. 과정에서 겪은 어려움도 있었지만 전보다 한 단계 성장했음에 의심은 없다.</p>]]></content>
        <category label="career" term="career"/>
        <category label="retrospect" term="retrospect"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[내가 2022년에 배운 것들]]></title>
        <id>https://jeonjaewon.github.io/blog/2022-retro</id>
        <link href="https://jeonjaewon.github.io/blog/2022-retro"/>
        <updated>2023-02-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[- 프로로서의 마음가짐]]></summary>
        <content type="html"><![CDATA[<ul>
<li>프로로서의 마음가짐</li>
</ul>
<p>2022년은 돈을 받고 소프트웨어 개발자로 일하기 시작한 첫 해다. 학생 꼬리표를 떼고 처음으로 회사에서 일을 하며 참 많이 배웠다고 생한다.</p>
<p>어떤 태도로 일을 대하고, 사람들을 대할지에 대한 나만의 기준을 배워나갈 수 있었다. 돈을 받고 회사에서 일을 하는 한 프로로서의 태도를 잃지 않으려고 노력했다.</p>
<hr>
<ul>
<li>이직</li>
</ul>
<p>비교적 일찍 이직 프로세스를 경험하며 많은 경험과 고민을 할 수 있었다. 여담이지만 새 직장 첫 출근 전에 혼자 다녀온 여행 덕분에 소중한 경험을 할 수 있었고, 인간적으로도 성장할 수 있었다. 그렇기에 '2022년의 사건 단 하나'를 선정한다면 이직을 꼽아야겠다.</p>
<p>서류를 여러번 고치며 이력서를 어떻게 작성해야하는지 고민을 많이 했다. 경력에서 어필할 내용은 없었기에, 전 직장에서 맡은 프로젝트들에서 제가 했던 기술적인 판단들의 근거 위주로 작성다. 최종 이력서로 현 직장에 최종 합격 후 이야기해 보니 이력서에 확실한 플러스 요인은 없었더라도 마이너스는 딱히 없었던 것 같다. 이력서란 결국 면접 기회를 얻기 위한 수단 정도로만 생각한다면 성공이지 않았나 싶다.</p>
<p>과제, 전화면접부터 라이브 코딩까지 많은 전형을 경험했다 면접은 확실히 하면 할수록 느는 것 같다. 특히 라이브 코딩은 한 번 해보고 안해보고의 차이가 굉장히 크다고 느꼈다. 컬쳐핏 내지 인성 면접은 꾸며진 답변을 하기보다는 자신의 생각을 이야기하는게 면접관도, 면접자도 더 좋다고 느꼈다.</p>
<hr>
<ul>
<li>솔직한 커뮤니케이션</li>
</ul>
<p>현 직장의 기업 문화에서 크게 강조하는 내용 중 하나가 솔직한 커뮤니케이션이다. 사실 입사 전에는 걱정도 있었는데, '솔직함'과 '무례함'을 구분하지 못하는 사례들을 겪다 보니 과연 내부 문화가 실제로 어떨지 걱정이 앞섰다. 그렇기에 최종 면접 자리에서 조직 내에서 어떤 시각으로 솔직함을 바라보고 있는지 질문하기도 했다.</p>
<p>입사 후 느낀 점은 걱정과는 달리&nbsp;이러한 문화가 잘 유지되고 있다는 점이다. 솔직함을 방패삼아 부적절한 의사소통을 하는 사례는 아직까지 경험해보지 못했다.</p>
<p>그전에는 스스로 굉장히 조심스러운 의사소통을 해왔다고 생각한다. 그렇기에 입사 후 최대한 솔직하고 직관적인 의사소통을 하기 위해 노력했다. 이미 많은 동료들이 그런 모습을 보여주고 있기에 어렵지 않게 적응할 수 있었던 것 같아 감사하다.</p>
<p>솔직함의 장점은 오해가 없다는 점이다. 누군가의 말이 다른 의도가 있을지 의심하고 고민하는 일은 상당히 스트레스받는 일이다. 직장에서 들은 말의 의미가 무엇인지에 대한 고민을 퇴근 후 집까지 가져오는 경우도 있을 것이다. 그러나 서로가 솔직하게 말한다는 믿음이 생기면 있는 그대로 받아들일 수 있어 간단하고 명료하게 대화를 마무리지을 수 있다. 이런 점이 업무에서 오는 어려움을 크게 줄여주고, 서로간의 신뢰를 쌓는데 도움을 주는 것 같다.</p>
<hr>
<ul>
<li>기술적 배움</li>
</ul>
<p>초기 온보딩과 이후 맡은 업무를 진행하며 회사에서 사용하고 있는 기술들에 익숙해질 수 있었다. redux와 saga를 익히고 있는데, 트렌디하지는 않더라도 충분히 뾰족한 장점이 있는 조합이라고 생각한다. 빠르게 프로젝트 하나를 맡아서 출시를 앞두고 있는데, 많은 도움을 주는 동료들과 함께 할 수 있어 즐겁게 일했다고 생각이 든다.</p>]]></content>
        <category label="career" term="career"/>
        <category label="retrospect" term="retrospect"/>
    </entry>
</feed>